from machine import Pin, I2C, SPI
import time, menu, alarm, machine, hcsr04, servoMotor, pumpDriver, mfrc522,sl067
import network, dht, ujson
from umqtt.simple import MQTTClient
import time

# definizione in esadecimale della foto dei gatti in 128x64
immagine = bytearray([
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0x06, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xc3, 0x0e, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xc3, 0xde, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0x1f, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0xff, 0xff, 0x67, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0x1e, 0x00, 0x7f, 0xfe, 0x77, 0xff, 0xe6, 0x7f, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xfe, 0x0c, 0x00, 0x7f, 0xfe, 0xf0, 0xf8, 0xef, 0x3f, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xfe, 0x0c, 0x00, 0x3f, 0xfe, 0xfa, 0x00, 0xef, 0x1f, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0x0c, 0x00, 0x3f, 0xfc, 0xf9, 0x1e, 0xee, 0x1f, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0x3c, 0x00, 0x3f, 0xf5, 0xfd, 0x3e, 0xe4, 0xcf, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x3f, 0xf8, 0xfd, 0xfc, 0xf7, 0x87, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x3f, 0xfc, 0x5f, 0xfd, 0xfb, 0x27, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0xf0, 0xff, 0xfc, 0x79, 0xc7, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0xff, 0xfc, 0xff, 0xb0, 0xfc, 0xd3, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0xff, 0xf0, 0x70, 0xf1, 0xfe, 0x7b, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0x10, 0xe0, 0xff, 0x79, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0x80, 0x0c, 0xff, 0x39, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x04, 0x00, 0x7e, 0x7f, 0xb9, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0xfe, 0x1f, 0xb9, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x01, 0xfc, 0x07, 0x99, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x03, 0xf8, 0x03, 0x39, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x07, 0xf0, 0x00, 0x39, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x07, 0xe0, 0x00, 0x7b, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xc0, 0x00, 0x0f, 0xc0, 0x00, 0x73, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x27, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x04, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x08, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0x38, 0x20, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0xff, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0x80, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x60, 0x7f, 0xc0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0xf0, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xe0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff])


# definizione pin OLED screen
sck_pin = 22
sda_pin = 21
# definizione pin Relay per la pompa
water_pump_pin = 32
# definizione pin per Servo Motor
servo_pin = 15
# definizione pin Food HCSR04
food_echo = 34
food_trig = 16
# definizione pin Cat Water HCSR04
cat_water_echo = 35
cat_water_trig = 17
# definizione pin Navigation Button
sel_pin = 26
# definizione pin Navigation Button
act_pin = 27
# definizione pin Led Green - Red
green_led = 14
red_led = 12
# definizione pin Buzzer passivo
buzz = 13

# Inizializzazione degli oggetti per i vari componenti
oled = menu.OLED_MENU(sck_pin=sck_pin, sda_pin=sda_pin, sel_pin=sel_pin, act_pin=act_pin) # oled
water_pump = pumpDriver.PUMP_DRIVER(water_pump_pin) # pompa
alarm = alarm.ALARM(green_led, red_led, buzz) # allarme dove definiamo una serie di funzioni che in base alla situazione gestiscono i led e il buzzer
food_prox = hcsr04.HCSR04(food_trig,food_echo) # sensore di distanza per i croccantini
cat_prox = hcsr04.HCSR04(cat_water_trig,cat_water_echo) # sensore di distanza in prossimit√† del gatto all'acqua
servo = servoMotor.ServoMotor(servo_pin) # servo motor per aprire la porticina delle crocchette
spi = SPI(2, baudrate=2500000, polarity=0, phase=0)
spi.init()
water_sensor=sl067.SL067(33) # sensore dell'acqua

# Variabili per il tracciamento delle misurazioni precedenti e degli ID dei gatti
prev_food_measure=""
prev_water_measure=""
last_cat = ""

# Livelli di r iferimento per il cibo e la rilevanza del gatto
food_lvl_max = 300
cat_relevance = 50
food_lvl_min = 280

# MQTT Server Parameters per effettuare il collegamento a nodered
MQTT_CLIENT_ID = "micropython1001"
MQTT_BROKER    = "test.mosquitto.org"
MQTT_USER      = ""
MQTT_PASSWORD  = ""
MQTT_TOPIC     = ["Gruppo13-Cibo","Gruppo13-Servo","Gruppo13-Pump","Gruppo13-Mangiare","Gruppo13-Acqua"]

oled.clear()
print("Connecting to WiFi", end="")
oled.Wifi_MQTT_connection_idle(True)
sta_if = network.WLAN(network.STA_IF)
sta_if.active(True)
sta_if.connect('MARTIN ROUTER KING', '12345678')

while not sta_if.isconnected():
  print(".", end="")
  time.sleep(0.1)
print(" Connected!")
oled.connection_result(True)
time.sleep(2)

# definisco le due chiavi per nfc dove identifico rispettivamente i gatti
Bolek = "0xda7e8591"
Tygrys = "0x897ee4a3"

# Funzione di callback per la gestione dei messaggi MQTT ricevuti
def subCallback(topic, msg):
    # Decode the incoming message and topic from bytes to string
    msg_str = msg.decode('utf-8')
    topic_str = topic.decode('utf-8')

    # Print the decoded topic and message for debugging
    print(f"Received message: '{msg_str}' on topic: '{topic_str}'")

    # Servo control
    if topic_str== MQTT_TOPIC[1]:
        if msg_str == 'true':
            alarm.food_refill()
            servo.rotate(0,100)
        elif msg_str == 'false':
            servo.rotate(0,100,-1)
        else:
            print(f"Invalid message for servo control: '{msg_str}'")

    # Water pump control
    elif topic_str == MQTT_TOPIC[2]:
        if msg_str == 'true':
            alarm.water_trig_flow()
            water_pump.activate_pump(True) # attivo
        elif msg_str == 'false':
            water_pump.activate_pump(False) # disattivo
        else:
            print(f"Invalid message for water pump control: '{msg_str}'")


# Connessione al server MQTT e sottoscrizione ai topic...
print("Connecting to MQTT server... ", end="")
oled.Wifi_MQTT_connection_idle(False)
client = MQTTClient(MQTT_CLIENT_ID, MQTT_BROKER)
client.set_callback(subCallback)
client.connect()
client.subscribe(MQTT_TOPIC[1])
client.subscribe(MQTT_TOPIC[2])

# ...se avviene allora si connette!
print("Connected!")
oled.connection_result(True)
time.sleep(2)

# Funzione per avviare il menu e gestire le azioni dell'utente
def menu_start(wtr_lvl, food_lvl, food_max, cat):
    oled.menu_navigation(wtr_lvl,food_lvl,food_max, cat)
    alarm.idle()
    action = oled.menu_action()
    if action == 0:
        pass
    elif action == 1:
        if food_lvl > 0:
            alarm.food_refill()
            servo.rotate(0,100)
            time.sleep(2)
            servo.rotate(0,100,-1)
    elif action == 2:
        if wtr_lvl > 0:
            alarm.water_trig_flow()
            print("Act Pump")
            water_pump.activate_pump(True)
            time.sleep(2)
            print("Deact pump")
            water_pump.activate_pump(False)
    elif action == 3:
        alarm.clear()
        oled.soft_reset()

def check_food_low(act_level, min_level):
    new_level = act_level


# visualizzazione dei gatti sull'OLED per tre secondi e poi visualizza il menu
oled.draw_start(immagine)
time.sleep(3)
oled.draw_menu_idle()


while True:
    #inizializziamo all'interno del while true perch√® altrimenti da problemi
    rdr = mfrc522.MFRC522(spi=spi, gpioRst=4, gpioCs=5)

    water_pump = pumpDriver.PUMP_DRIVER(water_pump_pin)

    # calcolo l'effettiva distanza o acqua presente
    food_measure = food_prox.distance_mm()
    cat_measure = cat_prox.distance_mm()
    water_measure=water_sensor.read_value()
    #water_measure=100
    water_measure_min = water_measure*0.2

    menu_start(water_measure,food_measure,food_lvl_max,last_cat)

    # check se si deve ricaricare il dispenser dei croccantini
    while food_measure >= food_lvl_min:
        #oled.low_food_clear()
        alarm.low_food_check()
        print("Riempire croccantini. ")
        food_measure = oled.map_value(food_prox.distance_mm(), food_lvl_max)
        print("Cibo")
        print(food_measure)
        if food_measure <= food_lvl_min:
            alarm.clear()
            alarm.idle()

    """
    # check se si deve riempire la vaschetta dell'acqua
    while water_measure <= water_measure_min:
        alarm.low_water_check()
        print("Riempire acqua. ")
        water_measure=water_sensor.read_value()
    """

    # scrittura dei messaggi se presenti su nodered
    client.check_msg()

    food_measure_perc = oled.map_value(food_prox.distance_mm(), food_lvl_max)
    message_food = food_measure_perc
    message_str_food = str(message_food)
    message_str_water=str(water_measure)

    if message_str_food != prev_food_measure:
        print("Updated food value!")
        print("Reporting to MQTT topic {}: {}".format(MQTT_TOPIC[0], message_str_food))
        client.publish(MQTT_TOPIC[0],message_str_food)
        prev_food_measure = message_str_food

    if message_str_water != prev_water_measure:
        print("Updated water value!")
        print("Reporting to MQTT topic {}: {}".format(MQTT_TOPIC[4], message_str_water))
        client.publish(MQTT_TOPIC[4],message_str_water)
        prev_water_measure = message_str_water


    # gestione per la lettura delle chiavi
    # appena viene letta la chiave se valida apre la porticina dei croccantini
    (stat, tag_type) = rdr.request(rdr.REQIDL)
    if stat == rdr.OK:
        (stat, raw_uid) = rdr.anticoll()
        if stat == rdr.OK:
            card_id = "0x%02x%02x%02x%02x" % (raw_uid[0], raw_uid[1], raw_uid[2], raw_uid[3])
            alarm.food_refill()
            servo.rotate(0,100,1)
            time.sleep(2)
            print("Card ->",card_id)
            servo.rotate(0,100,-1)

            # il gatto rilevato viene visualizzato il nome sull'OLED e anche su nodered con un messaggio
            if card_id == Bolek:
                last_cat = "BOLEK"
                client.publish(MQTT_TOPIC[3],'Bolek')
                oled.draw_menu_cat(last_cat)
                oled.draw_menu_idle()
            elif card_id == Tygrys:
                client.publish(MQTT_TOPIC[3],'Tygrys')
                last_cat = "TYGRYS"
                oled.draw_menu_cat(last_cat)
                oled.draw_menu_idle()


    # verifico l'avvicinamento del gatto al sensore di distanza e se √® a 5 centimetri di distanza si attiva la pompa
    if cat_measure > -1:
        print("Distanza gatto: ", cat_measure)
    if cat_measure < cat_relevance and cat_measure!=-1:
        alarm.water_trig_flow()
        print("Act Pump")
        water_pump.activate_pump(True)
        time.sleep(2)
        print("Deact pump")
        water_pump.activate_pump(False)
